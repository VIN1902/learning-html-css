/* Pre styling for setting up demonstration */

.container {
    border: 5px solid;
}

.item {
    background-color: #ffa2eb;
    border: 6px solid #ff00f2;
    border-radius: 6px;
    text-align: center;
    color: #fff;
}

article p {
    margin: 7px;
}

/* Grid */

.container {
    display: grid;
    /* grid-template-columns: 100px 100px 100px; */
    grid-template-columns: repeat(15, 100px);
    grid-template-rows: repeat(15, 100px);

    /* To distribute equally use 'fr' unit*/
    /* grid-template-columns: repeat(8, 1fr);
    grid-template-rows: repeat(8, 1fr); */

    /* grid-template-columns: 1fr 3fr 1fr;
    grid-template-columns: 1fr minmax(100px, 3fr) 1fr; */

    /* grid-template-areas: 
    "a a a"
    "b c b"
    "d d d";
    Now use grid-area: a; and so on inside items. */

    justify-items: stretch;
    align-items: stretch;

    /* To position entire grid (whole content = every cell) within a container of fixed size. */
    /* justify-content: space-around;
    align-content: space-around; */

    /* Implicit Grid is the grid that the browser generates automatically when:
        1. You place more grid items than there are available tracks in your explicit grid.
        2. You explicitly place an item using grid-column or grid-row to a track that hasn't been defined in the explicit grid.
    We can decide its size, before that situation happens using grid-auto-rows. */
    grid-auto-rows: 100px;
    /* We can also pre-decide whether the Implcit grid formed will be row or column using flow */
    grid-auto-flow: row;

    /* Responsive trick */
    /* grid-template-rows: repeat(4, 100px);
    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr)); */
}

.item-1 {

    /* Positioning items */

    /* grid-row-start: 1;
    grid-row-end: 3;
    grid-column-start: 1;
    grid-column-end: 4; */

    /* grid-row: 1 / 3;
    grid-column: 1 / 4; */

    /* grid-row: span 2;
    grid-column: span 3; */
    /* with span integer represents number of cells from the starting line. Unlike in above examples where integer meant exactly the line number. */

    grid-area: 1 / 1 / 3 / 4;
    /* grid-area: row-start / col-start / row-end / col-end; */
}

.item-2 {

    /* Layering items */
    grid-area: 2/3/4/5;
    z-index: 1;
}

.item-3 {
    justify-self: center;
    align-self: center;
}